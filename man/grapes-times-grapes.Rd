% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/variable-separators.R
\name{\%,*\%}
\alias{\%,*\%}
\title{'Starred' variable separator}
\usage{
lhs \%,*\% rhs
}
\description{
\code{\%,*\%} performs a very similar function to \code{\link{\%,\%}} on the lefthand side of assignments, but covers the inclusion of the \code{*} variable unpacking operator in Python. In the relevant Python scenario, preceding a variable with \code{*} while unpacking to it will let it take anywhere from 0 to an 'infinite' set of values, depending on what it needs to balance the variables and values being assigned.  To illustrate, the first line in the Python code below assigns \code{1} to \code{a}, \code{6} to \code{c} and \code{[2, 3, 4, 5]} to \code{b}, while the second line assigns Python's empty list (\code{[]}) to \code{b}.
}
\details{
\preformatted{
a, *b, c = [1, 2, 3, 4, 5, 6]
a, *b, c = [1, 6]
}

\code{unpackr} replicates the Python examples like so:

\preformatted{
a %,*% b %,% = 1:6
a %,*% b %,% = c(1, 6)
}

Here however, when \code{b} is set to take zero values, it is assigned \code{NULL} rather than \code{list()} (although this default value can be changed with \code{option("unpackr_empty_val")}).

When the starred variable is set to take multiple values, it will will be assigned a value of the general form \code{RHS_value[i:j]}, where \code{i} and \code{j} are indices. This means that if the righthand side of the assignment is a list, the starred variable will be assigned a list, a vector if a vector, and a data frame if a data frame, etc.
}
\note{
As in Python, you can only star one variable at a time in any lefthand side of an assignment. It also cannot be used on the righthand side of an assignment (which has different meaning in Python).

Additionally, there is currently no way to star the leftmost variable. Unfortunately the way operators work in R, it seems currently impossible to overwrite \code{*} in a way that would let it be put on the left side of the variable as a unary operator. Other potential unary operators would seem semantically opaque, and making a \code{\%*,\%} function would lose some of the surface parallelism with Python. If such a feature would be necessary or have a useful test case for you, open an issue on the GitHub repo (\url{https://github.com/burchill/unpackr/}), and I will add it in.
}
