% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/assignment-operators.R
\name{assignment-operators}
\alias{assignment-operators}
\alias{=}
\alias{<<-}
\alias{<-}
\title{Variable assignment via unpacking}
\usage{
x = value  or  x ... = value

x <<- value  or  x ... <<- value

x <- value  or  x ... <- value
}
\arguments{
\item{\dots}{additional unquoted variable names, separated by \code{\%,\%} or \code{\%,*\%}}

\item{x}{an unquoted variable name}

\item{value}{a value to be assigned to \code{x} (and optionally to the additional variables)}
}
\value{
The leftmost assigned value (invisibly). Although generally inadvisable, this opens the option for chaining assignment operators.
}
\description{
\code{unpackr} lets users assign unpacked variables with three operators, \code{<-}, \code{=}, and \code{<<-} (importantly, \strong{not} \code{->} or \code{->>}). These functions exist in base R as primitives, and \code{unpackr} masks the base R versions. This masking should not affect the internal functioning of any other packages, but will affect any user-made code that uses these functions, after \code{unpackr} has been attached.

All of \code{unpackr}'s assignment operators will check the lefthand side of the assignment call to see if \code{\link{\%,\%}} or \code{\link{\%,*\%}} are present. If they are not, the assignment functions will behave almost exactly like the base R functions. If they \emph{are} present, the lefthand side will be checked to see if it has the correct syntax, separated by the \code{\%,\%} infix separators, and each variable will be assigned the values independently. See Details for how \code{<<-} makes assignments.
}
\section{Caveats (masking \code{\%,\%})}{


Although it seems unlikely that another package would also export \code{\%,\%} or \code{\%,*\%} (and indeed, this function is not exported by any of the top 1000 most popular packages on CRAN), if a package does export one of these functions, masks \code{unpackr}, \emph{and} is used in the lefthand side of an assignment, then that function's default behavior will be ignored.  Essentially, on the lefthand side of an assignment, \code{\%,\%} and \code{\%,*\%} are unmaskable.
}

\section{Caveats (performance decreases)}{


Most of the 'magic' of \code{unpackr} happens in the assignment operators, and although this code takes very little time to execute, masking the base R primitives can incur a significant slowdown in speed when a user is running hundreds of thousands of assignments in their own code.

Therefore, it is not recommended that one should use \code{unpackr} in situations where there is a premium on processing time. \code{unpackr} is probably more suited for personal projects than for production code.
}

