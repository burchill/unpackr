% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/variable-separators.R
\name{\%,\%}
\alias{\%,\%}
\title{Variable separator}
\usage{
lhs \%,\% rhs <- ...
}
\arguments{
\item{lhs}{An unquoted variable name or another infix-separated expression (for chaining separators)}

\item{rhs}{An unquoted variable name}
}
\description{
On the lefthand side of an assignment, \code{unpackr}'s infix operators \code{\%,\%} and \code{\link{\%,*\%}} are meant to mimic the commas in Python 3's variable unpacking, which lets the user assign multiple values to multiple variables with a single assignment call.  Take an example of the Python code below, which assigns \code{1}, \code{2}, and \code{3} to \code{a}, \code{b}, and \code{c}, respectively:

\preformatted{
a, b, c = [1, 2, 3]
}

Although this is impossible to \emph{exactly} replicate in R, \code{unpackr} lets users get a close approximation with the \code{\%,\%} infix separator.  For example, the following replicates the previous Python example:

\preformatted{
a \%,\% b \%,\% c <- c(1, 2, 3)
}

When used on the lefthand side of an assignment operator (\code{\link{<-}}, \code{\link{=}}, or \code{\link{<<-}}), \code{\%,\%} must separate unquoted variable names---complex calls such as: \code{names(x) \%,\% y <- ...} will throw errors. When used on the righthand side of an assignment, \code{\%,\%} has \link[=rhs-separator]{a different meaning and function}.
}
\details{
\code{unpackr}'s infix separators will attempt to separate any RHS assignment value by the first indexing level. E.g., a data frame's first indexing level (i.e., \code{dat[[i]]}) represents its columns, so \code{a \%,\% b <- dat} will attempt to assign the first and second columns to \code{a} and \code{b}, respectively.
}
\seealso{
\code{\link{\%,*\%}} for the starred variable separator; and \link[=rhs-separator]{\%,\% (righthand side)} for how \code{\%,\%} behaves on the righthand side of assignments.
}
